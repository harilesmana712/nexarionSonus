"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var Query = require('./');

var retrieve = require('../retrieve');

var _require = require('lodash'),
    identity = _require.identity,
    set = _require.set;
/**
 * When executed, this query will return a promise resolving to
 * the result of the inner query executed within the context of another
 * page.
 *
 * @class FollowQuery
 * @extends Query
 */


var FollowQuery =
/*#__PURE__*/
function (_Query) {
  _inherits(FollowQuery, _Query);

  /**
   * Constructs a FollowQuery given a query to find a URI within a document
   * and an inner query to execute on the document resolved from the URI.
   *
   * Also takes an additional object of configuration options.
   * 
   * @param  {Query}  uri       A query pointing to a URI for a different document.
   * @param  {Query}  inner     The query to execute on the other document.
   * @param  {object} [options] An object of additional configuration options.
   */
  function FollowQuery(uri, inner) {
    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

    _classCallCheck(this, FollowQuery);

    options.uri = uri;
    options.inner = inner;
    return _possibleConstructorReturn(this, _getPrototypeOf(FollowQuery).call(this, undefined, options));
  }
  /**
   * Configures the FollowQuery given an object of configuration options.
   *
   * If the inner query and URI query are not already Query objects,
   * then Query objects will be created from them.
   * 
   * @param  {object} options       An object of configuration options.
   * @param  {Query}  options.uri   A query pointing to a URI for a different document.
   * @param  {Query}  options.inner The query to execute on the other document.
   */


  _createClass(FollowQuery, [{
    key: "configure",
    value: function configure(options) {
      _get(_getPrototypeOf(FollowQuery.prototype), "configure", this).call(this, options);

      this.options.uri = Query.factory(this.options.uri, Query.factory.uri);
      this.options.inner = Query.factory(this.options.inner);
      this.options.request = this.options.request || {};
    }
    /**
     * Finds the URI in the given document and retrieves the document
     * from this URI. The inner query will be executed on this retrieved
     * document and its result will be returned.
     * 
     * @param  {Document}     document The document containing the URI linking to the other document.
     * @return {Promise<any>} A promise containing the result of the inner query on the retrieved document.
     */

  }, {
    key: "find",
    value: function find(document) {
      var _this = this;

      return this.options.uri.on(document).then(function (uri) {
        return _this.next(uri);
      }).then(function (document) {
        return _this.options.inner.on(document);
      })["catch"](function (err) {
        return undefined;
      });
    }
    /**
     * Retrieves the page at the given URI and returns a promise resolving to a
     * document that encapsulates it.
     * 
     * @param  {string}   uri The uri the document is located at.
     * @return {Promise<Document>} A promise resolving to the constructed document.
     */

  }, {
    key: "next",
    value: function next(uri) {
      return retrieve.request(set(this.options.request, 'uri', uri), this.options);
    }
  }]);

  return FollowQuery;
}(Query);

module.exports = FollowQuery;