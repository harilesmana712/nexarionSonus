"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var Query = require('./');
/**
 * When executed, this query will return a promise resolving to
 * a string found inside a document.
 *
 * If the value found within the document is not a string, it will be
 * coerced into one.
 *
 * @class StringQuery
 * @extends Query
 */


var StringQuery =
/*#__PURE__*/
function (_Query) {
  _inherits(StringQuery, _Query);

  /**
   * Constructs a StringQuery given a selector for the string in a document
   * and an object of additional configuration options.
   * 
   * @param  {string} selector             The selector for the string in a document.
   * @param  {object} [options]            An object of additional configuration options.
   * @param  {object} [options.default=''] The default value this query will resolve to.
   */
  function StringQuery(selector, options) {
    _classCallCheck(this, StringQuery);

    return _possibleConstructorReturn(this, _getPrototypeOf(StringQuery).call(this, selector, options));
  }
  /**
   * Configures the StringQuery given an object of configuration options.
   * By default, the default value a StringQuery will resolve to is an empty string ('').
   * 
   * @param  {object} options              An object of additional configuration options.
   * @param  {object} [options.default=''] The default value this query will resolve to.
   */


  _createClass(StringQuery, [{
    key: "configure",
    value: function configure(options) {
      _get(_getPrototypeOf(StringQuery.prototype), "configure", this).call(this, options);

      if (!this.options.hasOwnProperty('default')) this.options["default"] = '';
    }
    /**
     * Given the retrieved value, this method simply coerces it into a String.
     * 
     * @param  {any}      value    The query's value retrieved from the document.
     * @param  {Document} document The document the value was retrieved from.
     * @return {string}            The resulting, casted string.
     */

  }, {
    key: "build",
    value: function build(value, document) {
      return String(value);
    }
  }]);

  return StringQuery;
}(Query);

module.exports = StringQuery;