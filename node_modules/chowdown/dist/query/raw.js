"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var Query = require('./');
/**
 * When executed, this query will return a promise resolving to
 * the result of a custom document (i.e cheerio document) function.
 *
 * @class RawQuery
 * @extends Query
 */


var RawQuery =
/*#__PURE__*/
function (_Query) {
  _inherits(RawQuery, _Query);

  /**
   * Constructs a RawQuery given a raw document function and an additional
   * object of configuration options.
   * 
   * @param  {function} selector  The selector function.
   * @param  {object}   [options] An object of additional configuration options.
   */
  function RawQuery(selector) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    _classCallCheck(this, RawQuery);

    return _possibleConstructorReturn(this, _getPrototypeOf(RawQuery).call(this, selector, options));
  }
  /**
   * Passes the raw document function to the given document where it will be executed
   * and have its result returned.
   * 
   * @param  {Document}     document The document to execute the document function within.
   * @return {Promise<any>} A promise containing the result of raw selector function.
   */


  _createClass(RawQuery, [{
    key: "find",
    value: function find(document) {
      return document.raw(this.options.selector);
    }
  }]);

  return RawQuery;
}(Query);

module.exports = RawQuery;