"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var url = require('url');

var StringQuery = require('./string');
/**
 * When executed, this query will return a promise resolving to
 * a URI found inside a given document.
 *
 * @class UriQuery
 * @extends StringQuery
 */


var UriQuery =
/*#__PURE__*/
function (_StringQuery) {
  _inherits(UriQuery, _StringQuery);

  /**
   * Constructs a UriQuery given a selector for the URI in a document,
   * a base URI to resolve this URI against and an object of
   * additional configuration options.
   * 
   * @param  {string} selector  The selector for the URI in a document.
   * @param  {string} [base=''] The base URI to resolve the found URI against.
   * @param  {object} [options] An object of additional configuration options.
   */
  function UriQuery(selector) {
    var base = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

    _classCallCheck(this, UriQuery);

    options.base = base;
    return _possibleConstructorReturn(this, _getPrototypeOf(UriQuery).call(this, selector, options));
  }
  /**
   * Finds the URI in the document and resolves the found URI
   * against the query's base URI.
   * 
   * @param  {Document} document  The document to find the URI in.
   * @return {string}   The URI found in the document.
   */


  _createClass(UriQuery, [{
    key: "find",
    value: function find(document) {
      var uri = document.uri(this.options.selector);
      if (uri !== undefined) return url.resolve(this.options.base, uri);
    }
  }]);

  return UriQuery;
}(StringQuery);

module.exports = UriQuery;